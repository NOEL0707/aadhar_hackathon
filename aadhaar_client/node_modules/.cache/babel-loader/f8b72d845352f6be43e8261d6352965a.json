{"ast":null,"code":"var _jsxFileName = \"/home/noel/Desktop/aadhar_app/login-page/src/components/protectedroutes.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Auth from \"./auth\";\nimport Login from \"./login\";\nimport axios from \"axios\";\nimport auth from \"./auth\";\nimport address from \"./address\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Protectedroutes = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n\n  let [loading, setloading] = useState(false);\n  useEffect(() => {\n    setloading(false); //while calling api setting loading state to false.\n\n    axios.get(`http://${address.ip}:4444/checkauth`, {\n      withCredentials: true,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    }).then(res => {\n      if (res.data !== \"notloggedin\") {\n        //checking if user is logged in\n        Auth.login(); //changing is authenticated to true after checking if the user is legitimate.\n      } else {\n        auth.logout(); //  window.location.reload(); //if the user is not legitimate we will change the is authenticates attribute to false.\n      }\n\n      setloading(true);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => {\n      if (Auth.isAuthenticated()) {\n        return loading && /*#__PURE__*/_jsxDEV(Component, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }, this);\n      } else {\n        return loading && /*#__PURE__*/_jsxDEV(Login, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this);\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Protectedroutes, \"Hn73v/ldQXC266JbQ7iERQxshrM=\");\n\n_c = Protectedroutes;\nexport default Protectedroutes; // if(rest.path==='/Login' || Auth.isAuthenticated===false){\n//     return\n//     loading && <Route {...rest} render={(props)=>{\n//         return\n//             <Redirect to={\n//                 {\n//                     pathname:\"/Login\",\n//                     state : {from :props.location }\n//                 }\n//             }\n//             />\n//         }\n//     }\n//     />\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"Protectedroutes\");","map":{"version":3,"sources":["/home/noel/Desktop/aadhar_app/login-page/src/components/protectedroutes.js"],"names":["React","useEffect","useState","Route","Auth","Login","axios","auth","address","Protectedroutes","component","Component","rest","loading","setloading","get","ip","withCredentials","headers","Accept","then","res","data","login","logout","props","isAuthenticated"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAAA;;AAC7D,MAAI,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,UAAU,CAAC,KAAD,CAAV,CADc,CACK;;AACnBR,IAAAA,KAAK,CACFS,GADH,CACQ,UAASP,OAAO,CAACQ,EAAG,iBAD5B,EAC8C;AAC1CC,MAAAA,eAAe,EAAE,IADyB;AAE1CC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB,kBAFT;AAGP,4CAAoC;AAH7B;AAFiC,KAD9C,EASGC,IATH,CASSC,GAAD,IAAS;AACb,UAAIA,GAAG,CAACC,IAAJ,KAAa,aAAjB,EAAgC;AAC9B;AACAlB,QAAAA,IAAI,CAACmB,KAAL,GAF8B,CAEhB;AACf,OAHD,MAGO;AACLhB,QAAAA,IAAI,CAACiB,MAAL,GADK,CAEL;AACD;;AACDV,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KAlBH;AAmBD,GArBQ,EAqBN,EArBM,CAAT;AAuBA,sBACE,QAAC,KAAD,OACMF,IADN;AAEE,IAAA,MAAM,EAAGa,KAAD,IAAW;AACjB,UAAIrB,IAAI,CAACsB,eAAL,EAAJ,EAA4B;AAC1B,eAAOb,OAAO,iBAAI,QAAC,SAAD,OAAeY;AAAf;AAAA;AAAA;AAAA;AAAA,gBAAlB;AACD,OAFD,MAEO;AACL,eAAOZ,OAAO,iBAAI,QAAC,KAAD,OAAWY;AAAX;AAAA;AAAA;AAAA;AAAA,gBAAlB;AACD;AACF;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAtCD;;GAAMhB,e;;KAAAA,e;AAwCN,eAAeA,eAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { React, useEffect, useState } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Auth from \"./auth\";\nimport Login from \"./login\";\nimport axios from \"axios\";\nimport auth from \"./auth\";\nimport address from \"./address\";\n\nconst Protectedroutes = ({ component: Component, ...rest }) => {\n  let [loading, setloading] = useState(false);\n\n  useEffect(() => {\n    setloading(false); //while calling api setting loading state to false.\n    axios\n      .get(`http://${address.ip}:4444/checkauth`, {\n        withCredentials: true,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Credentials\": true,\n        },\n      })\n      .then((res) => {\n        if (res.data !== \"notloggedin\") {\n          //checking if user is logged in\n          Auth.login(); //changing is authenticated to true after checking if the user is legitimate.\n        } else {\n          auth.logout();\n          //  window.location.reload(); //if the user is not legitimate we will change the is authenticates attribute to false.\n        }\n        setloading(true);\n      });\n  }, []);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (Auth.isAuthenticated()) {\n          return loading && <Component {...props} />;\n        } else {\n          return loading && <Login {...props} />;\n        }\n      }}\n    />\n  );\n};\n\nexport default Protectedroutes;\n\n// if(rest.path==='/Login' || Auth.isAuthenticated===false){\n//     return\n//     loading && <Route {...rest} render={(props)=>{\n//         return\n//             <Redirect to={\n//                 {\n//                     pathname:\"/Login\",\n//                     state : {from :props.location }\n//                 }\n//             }\n//             />\n//         }\n//     }\n//     />\n\n// }\n"]},"metadata":{},"sourceType":"module"}